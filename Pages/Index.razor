@page "/"
@using server.Data
@using System.Text.RegularExpressions
@inject IJSRuntime js

<p>In order for this tool to work, an "uncompressed XML" file is needed for your .als project</p>
<ol>
    <li>Make a copy of your als project file</li>
    <li>Upload the duplicate file here</li>
</ol>
<p>(current limit is 512MB; email me if the file is bigger than this)</p>
<p class="disclaimer">
    DISCLAIMER: I am not liable for any damage done to your original file.
    This is why step 1 is absolutely crucial. You should still send your file to Ableton support to see if they can fix it.
    They will most likely do a much better job than this tool.
</p>

<input type="file" id="fileUpload" @onchange="HandleFileSelectedAsync" />

<section>
    @if (_uploading)
    {
        <p>Uploading...</p>
        <div class="loader"></div>
    }
    @if (_fileContent is byte[])
    {
        <p><b>Uploaded @_filename</b></p>
        <div class="download">
            <p>Now click "Get New XML" to download the new (hopefully) un-corrupted file</p>
            <p>Be sure to save the file with the ".als" extension</p>
            <p>To use the tool on another file, refresh the page to start over</p>
        </div>
        <section>
            <button @onclick="@ProcessFileAsync">Get New XML</button>
            @if (_processing)
            {
                <p>Processing File...</p>
                <div class="loader"></div>
            }
        </section>
    }
    <section class="endorse-me">
        <p>
            If you liked this project, please consider "starring" the project on GitHub (link in sidebar)
        </p>
    </section>
</section>

@code
{
    private string _filename;
    private byte[] _fileContent;
    private string _result = "";
    private bool _processing = false;
    private bool _uploading = false;

    async Task HandleFileSelectedAsync()
    {
        _uploading = true;
        var jsFile = await js.ReadFileAsync();
        _uploading = false;

        _filename = jsFile.FileName;

        _fileContent = Convert
            .FromBase64String(Regex
                .Match(jsFile.Data, @"data:(?<mime>.+?)/(?<type>.+?),(?<base64>.+)")
                .Groups["base64"]
                .Value);
    }

    async Task ProcessFileAsync()
    {
        _processing = true;
        //TODO: look into algorithm asynchronicity to remove this delay call
        await Task.Delay(10);
        _result = await Fix.FixCorruptXmlAsync(_fileContent);
        _processing = false;

        await js.SaveFileAsync(_result);
    }
}