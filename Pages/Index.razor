@page "/"
@using server.Data
@inject IJSRuntime js

<p>In order for this tool to work, an "uncompressed XML" file is needed for your .als project</p>
<ol>
    <li>Make a copy of your als project file</li>
    <li>Change the duplicate file extension from ".als" to ".zip"</li>
    <li>Unzip this file to get the "uncompressed XML"</li>
    <ul>
        <li>you can also double check by opening the uncompressed file in a text editor</li>
        <li>it should say <code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code> on the top of the file</li>
    </ul>
    <li>Upload that file here (current limit is 1GB; email me if the file is bigger than this)</li>
</ol>
<p class="disclaimer">
    DISCLAIMER: I am not liable for any damage done to your original file.
    This is why step 1 is absolutely crucial. You should still send your file to Ableton support to see if they can fix it.
    They will definitely do a much better job than this tool.
</p>

<input type="file" id="fileUpload" @onchange="HandleFileSelectedAsync" />

<section>
    @if (_uploading)
    {
        <p>Uploading...</p>
        <div class="loader"></div>
    }
    @if (!string.IsNullOrWhiteSpace(_fileContent))
    {
        <p><b>Uploaded @_filename</b></p>
        <div class="download">
            <p>Now click "Get New XML" to download the new (hopefully) un-corrupted file</p>
            <p>Be sure to save the file with the ".als" extension</p>
            <p>To use the tool on another file, refresh the page to start over</p>
        </div>
        <section>
            <button @onclick="@ProcessFileAsync">Get New XML</button>
            @if (_processing)
            {
                <p>Processing File...</p>
                <div class="loader"></div>
            }
        </section>
    }
</section>

@code
{
    private string _filename;
    private string _fileContent;
    private string _result = "";
    private bool _processing = false;
    private bool _uploading = false;

    async Task HandleFileSelectedAsync()
    {
        _uploading = true;
        var jsFile = await js.ReadFileAsTextAsync();
        _uploading = false;

        _filename = jsFile.FileName;
        _fileContent = jsFile.Data;

    }

    async Task ProcessFileAsync()
    {
        _processing = true;
        //TODO: look into algorithm asynchronicity to remove this delay call
        await Task.Delay(10);
        _result = await Fix.FixCorruptXmlAsync(_fileContent);
        _processing = false;

        await js.SaveFileAsync(_result);
    }
}