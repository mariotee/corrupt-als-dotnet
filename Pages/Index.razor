@page "/"
@using server.Data
@using server.Data.Util
@inject Microsoft.Extensions.Hosting.IHostEnvironment env;
@inject IJSRuntime js

<p>In order for this tool to work, your project must have been corrupted due to "non-unique IDs"</p>
<ol>
    <li>Make a copy of your als project file</li>
    <li>Upload the duplicate file here</li>
</ol>
<p class="disclaimer">
    DISCLAIMER: I am not liable for any damage done to your original file.
    This is why step 1 is absolutely crucial. You should still send your file to Ableton support to see if they can fix it.
    They will most likely do a much better job than this tool.
</p>

<InputFile OnChange="@HandleFileSelectedAsync" />

<section>
    @if (_uploading)
    {
        <p>Uploading...</p>
        <div class="loader"></div>
    }
    @if (_fileContent is byte[] content && content.Length > 0)
    {
        <p><b>Uploaded @_filename</b></p>
        <div class="download">
            <p>Now click "Get New XML" to download the new (hopefully) un-corrupted file</p>
            <p>Be sure to save the file with the ".als" extension</p>
        </div>
        <section>
            <button @onclick="@ProcessFileAsync">Get New XML</button>
            @if (_processing)
            {
                <p>Processing File...</p>
                <div class="loader"></div>
            }
            @if (!string.IsNullOrEmpty(_error))
            {
                <p class="error">@_error</p>
            }
        </section>
    }
<section class="endorse-me">
    <p>
        If you liked this project, please consider "starring" the project on GitHub (link in sidebar)
    </p>
    <p>
        Also, current limit is 50MB; email me if the file is bigger than this (email found in same GitHub link)
    </p>
</section>
</section>

@code
{
    private string _filename;
    private byte[] _fileContent;
    private bool _processing = false;
    private bool _uploading = false;
    private string _error = "";
    private CorruptionType _corruptionType = CorruptionType.DUPLICATE_IDS;

    private DateTime _uploadInit;

    async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        _error = "";
        _uploading = true;
        _uploading = false;

        _filename = e.File.Name;

        _fileContent = new byte[e.File.Size + 1L];

        await e.File.OpenReadStream(maxAllowedSize: FileConstants.MaxFileSize).ReadAsync(_fileContent);

        _uploadInit = DateTime.Now;
    }

    async Task ProcessFileAsync()
    {
        _error = "";
        _processing = true;
        
        //since we're using free Azure app service, we need to delay this for file uploads over 1 MB
        //just in case the user clicks the process button too fast
        var processDelay = 5000 - (DateTime.Now.Millisecond - _uploadInit.Millisecond);
        processDelay = processDelay < 0 ? 0 : processDelay;
        await Task.Delay(processDelay);
        

        try
        {
            //TODO: look into algorithm asynchronicity to remove this delay call
            await Task.Delay(10);
            //TODO: future work - radio input for type of corruption
            var res = await Fix.FixCorruptXmlAsync(_fileContent, _corruptionType);
            await js.SaveFileAsync(res);

            _processing = false;
        }
        catch (UnsupportedCompressionAlgorithmException)
        {
            _error = "Invalid .als Project File (ERROR: not gzipped)";
            _processing = false;
        }
    }
}